(demo 1000)
quit
(load-file "market-data.clj")
(esp :list)
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(esp :list)
quit
(load-file "market-data.clj")
(mytest)
(esp :add "create schema test1 as (ipAddress string, userID string, numAttempts int)")
(esp :list)
(esp :list-types)
(esp :list-type)
(esp :display "java.lang.Object")
(esp :display "test1")
(def admin (.getEPAdministrator log-service))
admin
(quit)
(doc show)
(doc clojure.reflect)
(doc clojure.reflect/reflect)
(doc expression-info)
(doc clojure.reflect/reflect)
(print-table
  (sort-by :name 
    (filter :exception-types (:members (r/reflect "foo")))))
(use 'clojure.reflect)
(defn all-methods [x]
    (->> x reflect 
           :members 
           (filter :return-type)  
           (map :name) 
           sort 
           (map #(str "." %) )
           distinct
           println))
(all-methods "")
(all-methods 1)
(all-methods log-service)
(require '[clojure.reflect :as r])
(use '[clojure.pprint :only [print-table]])
(print-table (:members (r/reflect "foo")))
(print-table (:members (r/reflect log-service)))
foo
(load-file "market-data.clj")
quit
(esp :add "create schema test1 as (ipAddress string, userID string, numAttempts int)")
(def  config (.getConfiguration (.getAdministrator log-service)))
(def  config (.getConfiguration (.getEPAdministrator log-service)))
(.getEventType config "test1")
(def e (.getEventType config "test1"))
(.getPropertyNames e)
(println (.getPropertyNames e))
(println (map print (.getPropertyNames e)))
(.getPropertyType e "ipAddress")
(configuration-get-event-type log-service "ipAddress")
(configuration-get-event-type log-service "test1")
(esp :display-type "test1")
(esp :list-type)
(esp :list-type "java.lang.Object")
(esp :display-type "java.lang.Object")
(esp :display-type "test1")
(configuration-get-event-type log-service "java.lang.Object")
(configuration-get-event-type log-service "test1")
(def foo .toString)
(def foo (symbol .toString))
(def foo #(.toString))
(def foo #.toString)
(def foo #(java.lang.Integer/toString))
(clojure.reflect/reflect service)
(defn stop-fn [s] (.stop s))
(filter #(= % "a") ["a" "b" "c" "a"])
(filter #(= % "x") ["a" "b" "c" "a"])
(filter #(or (= % "x") (= % "all")) ["a" "b" "c" "a"])
(filter #(or (= % "x") (= k "all")) ["a" "b" "c" "a"])
(def k "all")
(filter #(or (= % "x") (= k "all")) ["a" "b" "c" "a"])
(filter #(or (= % k) (= k "all")) ["a" "b" "c" "a"])
(def k "a")
(filter #(or (= % k) (= k "all")) ["a" "b" "c" "a"])
quit
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(def service log-service)
(def k "all")
(def func get-statement-member)
(esp :add "select * from LogDataEvent")
(do-statement log-service "all" get-statement-member)
 (map #(let [statement (.getStatement (.getEPAdministrator service) %1) ]
           (apply func statement))
        (filter #(or (= % k) (= "all" k))  
           (.getStatementNames (.getEPAdministrator service))))
 (filter #(or (= % k) (= "all" k))  
          #_=>            (.getStatementNames (.getEPAdministrator service))
)
(map #(let [statement (.getStatement (.getEPAdministrator service) %1) ]
           (apply func statement))
'("s0"))
(.getStatement (.getEPAdministrator service) "s0")
 (map #(let [ _ (println %1)
                statement (.getStatement (.getEPAdministrator service) %1) ]
           (apply func statement))
        (filter #(or (= % k) (= "all" k))  
           (.getStatementNames (.getEPAdministrator service))))
(map #(let [ _ (println %1) ] ) '("s0"))
(apply func  (.getStatement (.getEPAdministrator service) "s0"))
(func  (.getStatement (.getEPAdministrator service) "s0"))
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(do-statement log-service "all" get-statement-member)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :display)
(esp :display "s0")
quit
(esp :add "select * from LogDataEvent")
(esp :remove "s0")
(esp :list)
(esp :remove "s0")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :remove "s0")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :remove "all")
(esp :list)
quit
(esp :remove "all")
quit
(esp :add "select * from LogDataEvent")
(esp :remove "all")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :remove "all")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :remove "all")
(esp :list)
(def an-array (int-array 25000 (int 0)))
an-array
(amap ^ints an-array 
                   idx 
                   ret 
                   (+ (int 1) 
                      (aget ^ints an-array idx)))
@an-array
(println an-array)
(int 0)
(doc int-array)
(first int-array)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :remove :s0)
(esp :list)
quit
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :remove :all)
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :remove :all)
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
(future-call log-data-publisher)
(demo 100)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(esp :add "select * from Foobar")
(esp :add "select * from LogDataEvent where")
(esp :list)
quit
(esp :add "select * from LogDataEvent where")
(esp :list)
quit
(esp :add "select ptime from LogDataEvent")
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :stop "s1")
(esp :list)
(esp :start "s1")
(esp :stop :all)
quit
(esp)
quit
(esp)
(esp :help)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(esp :remove-type "MarketData")
(esp :list)
quit
(future-call log-data-publisher)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :stop :all)
(esp :list)
(esp :start :all)
(esp :list)
(demo 100)
quit
(esp :add "select * from LogDataEvent")
(esp :add "select ptime from LogDataEvent")
(esp :list)
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(future-call log-data-publisher)
(esp :add "select * from LogDataEvent")
(demo 10)
quit
(case "foo" "aaaa" 1 "foo" 2 "default" 3)
quit
(esp :add "create schema test as (foo integer, bar string)")
(esp :list)
(esp :list-type)
quit
(map println [ "a" "b" "c" ])
(map #(println %1) [ "a" "b" "c" ])
(map #(print %1) [ "a" "b" "c" ])
quit
(esp)
(esp :list)
quit
(esp :list)
(esp :add "select * from LogDataEvent")
quit
default-service
@default-service
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :list-service :all)
(esp :add-service "foobar")
quit
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :add-service "test")
quit
(esp :add-service "test")
quit
(def foo (create-service "test" (configuration)))
foo
(try-service #(create-service %1 (configuration)) "babo")
quit
(esp :add-service "test")
(esp :list)
(esp :list-service)
(esp :list-service :all)
(esp :list-service)
(esp :remove-service "default")
(esp :list-service)
(esp :list-service :all)
(esp :add-service "test")
(esp :list-service :all)
(esp :list)
(esp :use "test")
quit
(esp :list)
quit
(esp :use-service "default")
(esp :add-service "test")
(esp :use-service "test")
(esp :list-service)
(esp :use-service)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :use-service "test")
(esp :list)
(esp :use-service "default")
(esp :add "select * from FooBar")
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(esp :use-service "test")
(esp :list-service)
(esp :use-service "test2")
(esp :list)
(esp :use-service "default")
(esp :list)
quit
(esp :list)
(esp :use-service "default")
(esp :use-service "babo")
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :use-service "default")
(esp :list)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :list-type)
(esp :use-service "babo3")
(esp :list)
(esp :use-service)
(esp :list)
quit
(esp :list-service)
(esp :use-service)
(esp :use-service "test")
(esp :list-service)
(esp :use-service)
(esp :use-service "default")
(esp :list-service)
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(esp :use-service)
(esp :add-service "test")
(esp :use-service)
(esp :add-service "test")
(esp :list-service)
(esp :use-service)
(esp :use-service "test")
(esp :add "select * from LogDataEvent")
(esp :use-service)
(esp :use-service "default")
(esp :list-service)
(esp :add "select * from LogDataEvent")
(esp :list)
quit
(load-file "market-data.clj")
(esp :list-service)
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(esp :list)
(mytest)
(esp :list-service)
(esp :list)
quit
(load-file "market-data.clj")
(mytest)
(esp :list)
(esp :use-service)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
(load-file "market-data.clj")
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(load-file "market-data.clj")
(mytest)
quit
(esp :add-service "test1")
quit
(esp :add-service "test1")
(esp :use-service)
(esp :use-service :test1)
(esp :list)
(esp :list-type)
quit
(esp :use-service "test1")
(esp :list)
quit
(esp :use-service "test1")
(esp :list-service)
(esp :use-service)
(esp :add "select * from LogDataEvent")
quit
(future-call log-data-publisher)
(time (reduce + (range 100000)))
quit
(esp :list)
(load-file "market-data.clj")
(mytest)
(future-call log-data-pulbisher)
(future-call log-data-publisher)
(demo 1000)
(demo 100000)
(esp :add "select * from LogDataEvent")
(esp :list)
(esp :stop :s2)
(esp :start :s2)
(esp :stop :s2)
quit
(esp :list)
quoit
default-service
@default-service
quit
(esp :list)
default-service
@default-service
quit
default-service
(esp :list)
quit
default-service
@default-service
(@default-service)
quit
default-service
@default-service
shoot-now
@shoot-now
(def foo (create-service "bar" (configuration)))
foo
(def zoo (atom 0))
(reset! zoo 2)
zoo
quit
(esp :list)
(demo 100)
(esp :list-service)
(esp :add "select * from LogDataEvent")
(esp :stop :s1)
quit
(esp :list)
(esp :remove-service "default")
(esp :list)
(esp :list-service)
quit
(load-file "market-data.clj")
(mytest)
quit
